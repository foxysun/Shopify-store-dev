/* Jonathan Snook - MIT License - https://github.com/snookca/prepareTransition */
(function(a){a.fn.prepareTransition=function(){return this.each(function(){var b=a(this);b.one("TransitionEnd webkitTransitionEnd transitionend oTransitionEnd",function(){b.removeClass("is-transitioning")});var c=["transition-duration","-moz-transition-duration","-webkit-transition-duration","-o-transition-duration"];var d=0;a.each(c,function(a,c){d=parseFloat(b.css(c))||d});if(d!=0){b.addClass("is-transitioning");b[0].offsetWidth}})}})(jQuery);

/* replaceUrlParam - http://stackoverflow.com/questions/7171099/how-to-replace-url-parameter-with-javascript-jquery */
function replaceUrlParam(e,r,a){var n=new RegExp("("+r+"=).*?(&|$)"),c=e;return c=e.search(n)>=0?e.replace(n,"$1"+a+"$2"):c+(c.indexOf("?")>0?"&":"?")+r+"="+a};

/*============================================================================
  Money Format
  - Shopify.format money is defined in option_selection.js.
    If that file is not included, it is redefined here.
==============================================================================*/
if ((typeof Shopify) === 'undefined') { Shopify = {}; }
if (!Shopify.formatMoney) {
  Shopify.formatMoney = function(cents, format) {
    var value = '',
        placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
        formatString = (format || this.money_format);

    if (typeof cents == 'string') {
      cents = cents.replace('.','');
    }

    function defaultOption(opt, def) {
      return (typeof opt == 'undefined' ? def : opt);
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal   = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number/100.0).toFixed(precision);

      var parts   = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents   = parts[1] ? (decimal + parts[1]) : '';

      return dollars + cents;
    }

    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  };
}

// Timber functions
window.hulkthemes = window.hulkthemes || {};

hulkthemes.cacheSelectors = function () {
  hulkthemes.cache = {
    // General
    $html                    : $('html'),
    $body                    : $('body'),

    // Navigation
    $navigation              : $('#AccessibleNav'),
    $mobileSubNavToggle      : $('.mobile-nav__toggle'),

 

    // Product Page
    $productImage            : $('#ProductPhotoImg'),
    $productQuickImage       : $('#ProductQuickPhotoImg'),
 

    // Customer Pages
    $recoverPasswordLink     : $('#RecoverPassword'),
    $hideRecoverPasswordLink : $('#HideRecoverPasswordLink'),
    $recoverPasswordForm     : $('#RecoverPasswordForm'),
    $customerLoginForm       : $('#CustomerLoginForm'),
    $passwordResetSuccess    : $('#ResetSuccess')
  };
};

hulkthemes.init = function () {
  FastClick.attach(document.body);
  hulkthemes.cacheSelectors();
  hulkthemes.drawersInit();
  hulkthemes.mobileNavToggle();
  hulkthemes.responsiveVideos(); 
  hulkthemes.loginForms();
};

hulkthemes.drawersInit = function () {
  hulkthemes.LeftDrawer = new hulkthemes.Drawers('NavDrawer', 'left');
  hulkthemes.RightDrawer = new hulkthemes.Drawers('CartDrawer', 'right', {
    {% if settings.ajax_cart_enable %}'onDrawerOpen': ajaxCart.load{% endif %}
  });
};

hulkthemes.mobileNavToggle = function () {
  hulkthemes.cache.$mobileSubNavToggle.on('click', function() {
    $(this).parent().toggleClass('mobile-nav--expanded');
  });
};

hulkthemes.getHash = function () {
  return window.location.hash;
};

hulkthemes.updateHash = function (hash) {
  window.location.hash = '#' + hash;
  $('#' + hash).attr('tabindex', -1).focus();
};

hulkthemes.productPage = function (options) {
  var moneyFormat = options.money_format,
      variant = options.variant,
      selector = options.selector;
  
  
  // Selectors
  var form = jQuery('#' + selector.domIdPrefix).closest('form');
  var $productImage = $('.product_carousel  #ProductPhotoImg'),
      $addToCart = form.find('#AddToCart'),
      $productPrice = $('#ProductPrice'),
      $comparePrice = $('#ComparePrice'),
      $quantityElements = form.find('.quantity-selector, label + .js-qty'),
      $addToCartText = form.find('#AddToCartText'),
  	  $addToCartPreorder = form.find('#AddToCart.add_to_cart--preorder');

  if (variant) {

    // Update variant image, if one is set
    if (variant.featured_image) {
    
      var newImg = variant.featured_image,
          el = $productImage[0];
    
      Shopify.Image.switchImage(newImg, el, hulkthemes.switchImage);
    }
    

    // Select a valid variant if available
    if (variant.available) {
      // Available, enable the submit button, change text, show quantity elements
      $addToCart.removeClass('disabled').prop('disabled', false);
      $addToCartText.html({{ 'products.product.add_to_cart' | t | json }});
      $addToCart.val({{ 'products.product.add_to_cart' | t | json }});
      $addToCartPreorder.val('PREORDER');
      $quantityElements.show();
    } else {
      // Sold out, disable the submit button, change text, hide quantity elements
      $addToCart.addClass('disabled').prop('disabled', true);
      $addToCartText.html({{ 'products.product.sold_out' | t | json }});
      $addToCart.val({{ 'products.product.sold_out' | t | json }});
      $quantityElements.hide();
    }
    
  
    // Regardless of stock, update the product price
     $productPrice.html(Shopify.formatMoney(variant.price, moneyFormat));
    
    // Also update and show the product's compare price if necessary
    if (variant.compare_at_price > variant.price) {
  
      $comparePrice
        .html(Shopify.formatMoney(variant.compare_at_price, moneyFormat))
        .show();
    } else {
      
      $comparePrice.hide();
    }
    
     {% if settings.show_multiple_currencies %}
   	 	Currency.convertAll(defaultCurrency, Currency.currentCurrency);
    {% endif %}
  } else {
    // The variant doesn't exist, disable submit button.
    // This may be an error or notice that a specific variant is not available.
    // To only show available variants, implement linked product options:
    //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
    $addToCart.addClass('disabled').prop('disabled', true);
    $addToCartText.html({{ 'products.product.unavailable' | t | json }});
    $addToCart.val({{ 'products.product.unavailable' | t | json }});
    $quantityElements.hide();
  }
};

hulkthemes.switchImage = function (src, imgObject, el) {

  // Make sure element is a jquery object
  var $el = $(el);
  $el.attr('src', src);
   {% if settings.enable_product_image_zoom %}
  $('.product_slider .product_carousel .zoomImg').attr('src',src);
  {% endif %}
};

hulkthemes.quickview = function (options) {
  
  var moneyFormat = options.money_format,
      variant = options.variant,
      selector = options.selector;
  
  
  // Selectors
  var form = jQuery('#' + selector.domIdPrefix).closest('form');
  var $productQuickImage = $('#ProductQuickPhotoImg'),
      $addToCart = form.find('.quick_add'),
      $productPrice = form.find('#ProductPrice'),
      $comparePrice = form.find('#ComparePrice'),
      $quantityElements = form.find('.quantity-selector, label + .js-qty'),
      $addToCartText = form.find('#AddToCartText');

  if (variant) {

    if (variant.featured_image) {
	 
      var newImg = variant.featured_image,
          el = $productQuickImage[0];

      Shopify.Image.switchImage(newImg, el, hulkthemes.switchImageQuick);
    }

    // Select a valid variant if available
    if (variant.available) {
      
      // Available, enable the submit button, change text, show quantity elements
      $addToCart.removeClass('disabled').prop('disabled', false);
      $addToCartText.html({{ 'products.product.add_to_cart' | t | json }});
      $addToCart.val({{ 'products.product.add_to_cart' | t | json }});
      $quantityElements.show();
    } 
    else {
      
      // Sold out, disable the submit button, change text, hide quantity elements
      $addToCart.addClass('disabled').prop('disabled', true);
      $addToCartText.html({{ 'products.product.sold_out' | t | json }});
      $addToCart.val({{ 'products.product.sold_out' | t | json }});
     
      $quantityElements.hide();
    }
    
  
    // Regardless of stock, update the product price
     $productPrice.html(Shopify.formatMoney(variant.price, moneyFormat));
    
    // Also update and show the product's compare price if necessary
    if (variant.compare_at_price > variant.price) {
  
      $comparePrice
        .html(Shopify.formatMoney(variant.compare_at_price, moneyFormat))
        .show();
    } else {
      
      $comparePrice.hide();
    }
    
    
    $('.quick_product_desc .price span').html(Shopify.formatMoney(variant.price, moneyFormat));

     if (variant.compare_at_price > variant.price) {
     	$('.quick_product_desc .compare-price').show();
        $('.quick_product_desc .compare-price').html(Shopify.formatMoney(variant.compare_at_price, moneyFormat));
	 }
     else {
     	$('.quick_product_desc .compare-price').hide();
     }
    {% if settings.show_multiple_currencies %}
   	 Currency.convertAll(defaultCurrency, Currency.currentCurrency);
    {% endif %}
  } 
  else {
    // The variant doesn't exist, disable submit button.
    // This may be an error or notice that a specific variant is not available.
    // To only show available variants, implement linked product options:
    //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
    
    $addToCart.addClass('disabled').prop('disabled', true);
    $addToCartText.html({{ 'products.product.unavailable' | t | json }});
    $addToCart.val({{ 'products.product.unavailable' | t | json }});
    $quantityElements.hide();
  }
};

hulkthemes.switchImageQuick = function (src, imgObject, el) {
  // Make sure element is a jquery object
  var $el = $(el);
  $el.attr('src', src);
  {% if settings.enable_product_image_zoom %}
  $('.quick_product_slider .product_carousel .zoomImg').attr('src',src);
  {% endif %}
};





hulkthemes.responsiveVideos = function () {
  $('iframe[src*="youtube.com/embed"]').wrap('<div class="video-wrapper"></div>');
  $('iframe[src*="player.vimeo"]').wrap('<div class="video-wrapper"></div>');
};

hulkthemes.loginForms = function() {
  function showRecoverPasswordForm() {
    hulkthemes.cache.$recoverPasswordForm.show();
    hulkthemes.cache.$customerLoginForm.hide();
  }

  function hideRecoverPasswordForm() {
    hulkthemes.cache.$recoverPasswordForm.hide();
    hulkthemes.cache.$customerLoginForm.show();
  }

  hulkthemes.cache.$recoverPasswordLink.on('click', function(evt) {
    evt.preventDefault();
    showRecoverPasswordForm();
  });

  hulkthemes.cache.$hideRecoverPasswordLink.on('click', function(evt) {
    evt.preventDefault();
    hideRecoverPasswordForm();
  });

  // Allow deep linking to recover password form
  if (hulkthemes.getHash() == '#recover') {
    showRecoverPasswordForm();
  }
};

hulkthemes.resetPasswordSuccess = function() {
  hulkthemes.cache.$passwordResetSuccess.show();
};

/*============================================================================
  Drawer modules
  - Docs http://shopify.github.io/Timber/#drawers
==============================================================================*/
hulkthemes.Drawers = (function () {
  var Drawer = function (id, position, options) {
    var defaults = {
      close: '.js-drawer-close',
      open: '.js-drawer-open-' + position,
      openClass: 'js-drawer-open',
      dirOpenClass: 'js-drawer-open-' + position
    };

    this.$nodes = {
      parent: $('body, html'),
      page: $('#PageContainer'),
      moved: $('.is-moved-by-drawer')
    };

    this.config = $.extend(defaults, options);
    this.position = position;

    this.$drawer = $('#' + id);

    if (!this.$drawer.length) {
      return false;
    }

    this.drawerIsOpen = false;
    this.init();
  };

  Drawer.prototype.init = function () {
    $(this.config.open).on('click', $.proxy(this.open, this));
    this.$drawer.find(this.config.close).on('click', $.proxy(this.close, this));
    $("#CartObsc").on("click", $.proxy(this.close, this) );
  };

  Drawer.prototype.open = function (evt) {
    // Keep track if drawer was opened from a click, or called by another function
    var externalCall = false;

    // Prevent following href if link is clicked
    if (evt) {
      evt.preventDefault();
    } else {
      externalCall = true;
    }

    // Without this, the drawer opens, the click event bubbles up to $nodes.page
    // which closes the drawer.
    if (evt && evt.stopPropagation) {
      evt.stopPropagation();
      // save the source of the click, we'll focus to this on close
      this.$activeSource = $(evt.currentTarget);
    }

    if (this.drawerIsOpen && !externalCall) {
      return this.close();
    }

    // Add is-transitioning class to moved elements on open so drawer can have
    // transition for close animation
    this.$nodes.moved.addClass('is-transitioning');
    this.$drawer.prepareTransition();

    this.$nodes.parent.addClass(this.config.openClass + ' ' + this.config.dirOpenClass);
    this.drawerIsOpen = true;

    // Set focus on drawer
    this.trapFocus(this.$drawer, 'drawer_focus');

    // Run function when draw opens if set
    if (this.config.onDrawerOpen && typeof(this.config.onDrawerOpen) == 'function') {
      if (!externalCall) {
        this.config.onDrawerOpen();
      }
    }

    if (this.$activeSource && this.$activeSource.attr('aria-expanded')) {
      this.$activeSource.attr('aria-expanded', 'true');
    }

    // Lock scrolling on mobile
    this.$nodes.page.on('touchmove.drawer', function () {
      return false;
    });

    this.$nodes.page.on('click.drawer', $.proxy(function () {
      this.close();
      return false;
    }, this));
  };

  Drawer.prototype.close = function () {
    if (!this.drawerIsOpen) { // don't close a closed drawer
      return;
    }

    // deselect any focused form elements
    $(document.activeElement).trigger('blur');

    // Ensure closing transition is applied to moved elements, like the nav
    this.$nodes.moved.prepareTransition({ disableExisting: true });
    this.$drawer.prepareTransition({ disableExisting: true });

    this.$nodes.parent.removeClass(this.config.dirOpenClass + ' ' + this.config.openClass);

    this.drawerIsOpen = false;

    // Remove focus on drawer
    this.removeTrapFocus(this.$drawer, 'drawer_focus');

    this.$nodes.page.off('.drawer');
  };

  Drawer.prototype.trapFocus = function ($container, eventNamespace) {
    var eventName = eventNamespace ? 'focusin.' + eventNamespace : 'focusin';

    $container.attr('tabindex', '-1');

    $container.focus();

    $(document).on(eventName, function (evt) {
      if ($container[0] !== evt.target && !$container.has(evt.target).length) {
        $container.focus();
      }
    });
  };

  Drawer.prototype.removeTrapFocus = function ($container, eventNamespace) {
    var eventName = eventNamespace ? 'focusin.' + eventNamespace : 'focusin';

    $container.removeAttr('tabindex');
    $(document).off(eventName);
  };

  return Drawer;
})();

// Initialize Timber's JS on docready
$(hulkthemes.init);
